# Google Cloud Run Service with supporting infrastructure
# Generated by NDC CLI for .NET applications

terraform {
  required_version = ">= 1.0"
  required_providers {
    google = {
      source  = "hashicorp/google"
      version = "~> 5.0"
    }
  }
}

provider "google" {
  project = var.project_id
  region  = var.region
}

# Enable required APIs
resource "google_project_service" "cloudrun" {
  service = "run.googleapis.com"
  disable_dependent_services = true
}

resource "google_project_service" "artifactregistry" {
  service = "artifactregistry.googleapis.com"
  disable_dependent_services = true
}

resource "google_project_service" "cloudsql" {
  count   = var.enable_database ? 1 : 0
  service = "sqladmin.googleapis.com"
  disable_dependent_services = true
}

resource "google_project_service" "memorystore" {
  count   = var.enable_cache ? 1 : 0
  service = "redis.googleapis.com"
  disable_dependent_services = true
}

resource "google_project_service" "pubsub" {
  count   = var.enable_queue ? 1 : 0
  service = "pubsub.googleapis.com"
  disable_dependent_services = true
}

# Artifact Registry for container images
resource "google_artifact_registry_repository" "main" {
  location      = var.region
  repository_id = var.service_name
  description   = "Container repository for ${var.service_name}"
  format        = "DOCKER"
}

# Cloud SQL PostgreSQL instance
resource "google_sql_database_instance" "main" {
  count            = var.enable_database ? 1 : 0
  name             = "${var.service_name}-db"
  database_version = "POSTGRES_15"
  region           = var.region

  settings {
    tier = var.database_tier
    
    ip_configuration {
      ipv4_enabled    = false
      private_network = google_compute_network.main[0].id
    }

    backup_configuration {
      enabled = true
    }
  }

  deletion_protection = false

  depends_on = [
    google_project_service.cloudsql,
    google_service_networking_connection.private_vpc_connection
  ]
}

resource "google_sql_database" "main" {
  count    = var.enable_database ? 1 : 0
  name     = "${var.service_name}_db"
  instance = google_sql_database_instance.main[0].name
}

resource "google_sql_user" "main" {
  count    = var.enable_database ? 1 : 0
  name     = var.database_user
  instance = google_sql_database_instance.main[0].name
  password = var.database_password
}

# VPC Network for private services
resource "google_compute_network" "main" {
  count                   = var.enable_database || var.enable_cache ? 1 : 0
  name                    = "${var.service_name}-vpc"
  auto_create_subnetworks = false
}

resource "google_compute_subnetwork" "main" {
  count         = var.enable_database || var.enable_cache ? 1 : 0
  name          = "${var.service_name}-subnet"
  ip_cidr_range = "10.0.0.0/24"
  region        = var.region
  network       = google_compute_network.main[0].id
}

# Private service connection
resource "google_compute_global_address" "private_ip_address" {
  count         = var.enable_database || var.enable_cache ? 1 : 0
  name          = "${var.service_name}-private-ip"
  purpose       = "VPC_PEERING"
  address_type  = "INTERNAL"
  prefix_length = 16
  network       = google_compute_network.main[0].id
}

resource "google_service_networking_connection" "private_vpc_connection" {
  count                   = var.enable_database || var.enable_cache ? 1 : 0
  network                 = google_compute_network.main[0].id
  service                 = "servicenetworking.googleapis.com"
  reserved_peering_ranges = [google_compute_global_address.private_ip_address[0].name]
}

# Cloud Memorystore Redis instance
resource "google_redis_instance" "main" {
  count               = var.enable_cache ? 1 : 0
  name                = "${var.service_name}-redis"
  tier                = var.redis_tier
  memory_size_gb      = var.redis_memory_size_gb
  redis_version       = "REDIS_7_0"
  region              = var.region
  authorized_network  = google_compute_network.main[0].id

  depends_on = [
    google_project_service.memorystore,
    google_service_networking_connection.private_vpc_connection
  ]
}

# Cloud Storage bucket
resource "google_storage_bucket" "main" {
  count    = var.enable_storage ? 1 : 0
  name     = "${var.service_name}-storage-${random_id.bucket_suffix.hex}"
  location = var.region

  uniform_bucket_level_access = true
  force_destroy = true
}

resource "random_id" "bucket_suffix" {
  count       = var.enable_storage ? 1 : 0
  byte_length = 4
}

# Pub/Sub topic and subscription
resource "google_pubsub_topic" "main" {
  count = var.enable_queue ? 1 : 0
  name  = "${var.service_name}-topic"

  depends_on = [google_project_service.pubsub]
}

resource "google_pubsub_subscription" "main" {
  count = var.enable_queue ? 1 : 0
  name  = "${var.service_name}-subscription"
  topic = google_pubsub_topic.main[0].name

  message_retention_duration = "604800s"
  retain_acked_messages      = false
}

# Service Account for Cloud Run
resource "google_service_account" "cloudrun" {
  account_id   = "${var.service_name}-cloudrun"
  display_name = "Cloud Run service account for ${var.service_name}"
}

# IAM bindings for service account
resource "google_project_iam_member" "cloudrun_sql" {
  count   = var.enable_database ? 1 : 0
  project = var.project_id
  role    = "roles/cloudsql.client"
  member  = "serviceAccount:${google_service_account.cloudrun.email}"
}

resource "google_storage_bucket_iam_member" "cloudrun_storage" {
  count  = var.enable_storage ? 1 : 0
  bucket = google_storage_bucket.main[0].name
  role   = "roles/storage.objectAdmin"
  member = "serviceAccount:${google_service_account.cloudrun.email}"
}

resource "google_pubsub_topic_iam_member" "cloudrun_publisher" {
  count  = var.enable_queue ? 1 : 0
  topic  = google_pubsub_topic.main[0].name
  role   = "roles/pubsub.publisher"
  member = "serviceAccount:${google_service_account.cloudrun.email}"
}

resource "google_pubsub_subscription_iam_member" "cloudrun_subscriber" {
  count        = var.enable_queue ? 1 : 0
  subscription = google_pubsub_subscription.main[0].name
  role         = "roles/pubsub.subscriber"
  member       = "serviceAccount:${google_service_account.cloudrun.email}"
}

# VPC Connector for Cloud Run (if using private services)
resource "google_vpc_access_connector" "main" {
  count         = var.enable_database || var.enable_cache ? 1 : 0
  name          = "${var.service_name}-connector"
  region        = var.region
  ip_cidr_range = "10.8.0.0/28"
  network       = google_compute_network.main[0].name
}

# Cloud Run service
resource "google_cloud_run_v2_service" "main" {
  name     = var.service_name
  location = var.region
  ingress  = "INGRESS_TRAFFIC_ALL"

  template {
    service_account = google_service_account.cloudrun.email
    
    dynamic "vpc_access" {
      for_each = var.enable_database || var.enable_cache ? [1] : []
      content {
        connector = google_vpc_access_connector.main[0].id
        egress    = "PRIVATE_RANGES_ONLY"
      }
    }

    containers {
      image = "${var.region}-docker.pkg.dev/${var.project_id}/${google_artifact_registry_repository.main.repository_id}/${var.service_name}:latest"
      
      resources {
        limits = {
          cpu    = var.cpu
          memory = var.memory
        }
      }
      
      ports {
        container_port = var.port
      }

      # Environment variables
      dynamic "env" {
        for_each = var.enable_database ? [1] : []
        content {
          name  = "DATABASE_HOST"
          value = google_sql_database_instance.main[0].private_ip_address
        }
      }

      dynamic "env" {
        for_each = var.enable_database ? [1] : []
        content {
          name  = "DATABASE_NAME"
          value = google_sql_database.main[0].name
        }
      }

      dynamic "env" {
        for_each = var.enable_database ? [1] : []
        content {
          name  = "DATABASE_USER"
          value = google_sql_user.main[0].name
        }
      }

      dynamic "env" {
        for_each = var.enable_database ? [1] : []
        content {
          name  = "DATABASE_PASSWORD"
          value = var.database_password
        }
      }

      dynamic "env" {
        for_each = var.enable_cache ? [1] : []
        content {
          name  = "REDIS_CONNECTION_STRING"
          value = "${google_redis_instance.main[0].host}:${google_redis_instance.main[0].port}"
        }
      }

      dynamic "env" {
        for_each = var.enable_storage ? [1] : []
        content {
          name  = "GCS_BUCKET_NAME"
          value = google_storage_bucket.main[0].name
        }
      }

      env {
        name  = "GOOGLE_PROJECT_ID"
        value = var.project_id
      }

      dynamic "env" {
        for_each = var.enable_queue ? [1] : []
        content {
          name  = "PUBSUB_TOPIC_ID"
          value = google_pubsub_topic.main[0].name
        }
      }

      dynamic "env" {
        for_each = var.enable_queue ? [1] : []
        content {
          name  = "PUBSUB_SUBSCRIPTION_ID"
          value = google_pubsub_subscription.main[0].name
        }
      }
    }
  }

  depends_on = [
    google_project_service.cloudrun,
    google_artifact_registry_repository.main
  ]
}

# Allow unauthenticated requests (adjust based on requirements)
resource "google_cloud_run_service_iam_member" "public" {
  location = google_cloud_run_v2_service.main.location
  service  = google_cloud_run_v2_service.main.name
  role     = "roles/run.invoker"
  member   = "allUsers"
}