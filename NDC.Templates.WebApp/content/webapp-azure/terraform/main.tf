# Azure Container Apps with supporting infrastructure
# Generated by NDC CLI for .NET applications

terraform {
  required_version = ">= 1.0"
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.0"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.1"
    }
  }
}

provider "azurerm" {
  features {
    resource_group {
      prevent_deletion_if_contains_resources = false
    }
  }
}

# Random suffix for globally unique resources
resource "random_string" "suffix" {
  length  = 8
  special = false
  upper   = false
}

# Resource Group
resource "azurerm_resource_group" "main" {
  name     = "rg-${var.service_name}-${random_string.suffix.result}"
  location = var.location

  tags = var.tags
}

# Log Analytics Workspace for Container Apps
resource "azurerm_log_analytics_workspace" "main" {
  name                = "logs-${var.service_name}-${random_string.suffix.result}"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  sku                 = "PerGB2018"
  retention_in_days   = 30

  tags = var.tags
}

# Container Registry
resource "azurerm_container_registry" "main" {
  name                = "acr${var.service_name}${random_string.suffix.result}"
  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location
  sku                 = var.acr_sku
  admin_enabled       = true

  tags = var.tags
}

# Container App Environment
resource "azurerm_container_app_environment" "main" {
  name                       = "cae-${var.service_name}-${random_string.suffix.result}"
  location                   = azurerm_resource_group.main.location
  resource_group_name        = azurerm_resource_group.main.name
  log_analytics_workspace_id = azurerm_log_analytics_workspace.main.id

  tags = var.tags
}

# SQL Server (if database is enabled)
resource "azurerm_mssql_server" "main" {
  count                        = var.enable_database ? 1 : 0
  name                         = "sql-${var.service_name}-${random_string.suffix.result}"
  resource_group_name          = azurerm_resource_group.main.name
  location                     = azurerm_resource_group.main.location
  version                      = "12.0"
  administrator_login          = var.database_admin_username
  administrator_login_password = var.database_admin_password
  minimum_tls_version          = "1.2"

  tags = var.tags
}

# SQL Database
resource "azurerm_mssql_database" "main" {
  count     = var.enable_database ? 1 : 0
  name      = "${var.service_name}_db"
  server_id = azurerm_mssql_server.main[0].id
  sku_name  = var.database_sku
  
  tags = var.tags
}

# SQL Firewall rule for Azure services
resource "azurerm_mssql_firewall_rule" "azure_services" {
  count            = var.enable_database ? 1 : 0
  name             = "AllowAzureServices"
  server_id        = azurerm_mssql_server.main[0].id
  start_ip_address = "0.0.0.0"
  end_ip_address   = "0.0.0.0"
}

# Redis Cache (if cache is enabled)
resource "azurerm_redis_cache" "main" {
  count               = var.enable_cache ? 1 : 0
  name                = "redis-${var.service_name}-${random_string.suffix.result}"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  capacity            = var.redis_capacity
  family              = var.redis_family
  sku_name            = var.redis_sku
  enable_non_ssl_port = false
  minimum_tls_version = "1.2"

  redis_configuration {
  }

  tags = var.tags
}

# Storage Account (if storage is enabled)
resource "azurerm_storage_account" "main" {
  count                    = var.enable_storage ? 1 : 0
  name                     = "st${var.service_name}${random_string.suffix.result}"
  resource_group_name      = azurerm_resource_group.main.name
  location                 = azurerm_resource_group.main.location
  account_tier             = var.storage_account_tier
  account_replication_type = var.storage_account_replication_type
  min_tls_version          = "TLS1_2"

  blob_properties {
    delete_retention_policy {
      days = 30
    }
  }

  tags = var.tags
}

# Storage Container
resource "azurerm_storage_container" "main" {
  count                 = var.enable_storage ? 1 : 0
  name                  = "${var.service_name}-container"
  storage_account_name  = azurerm_storage_account.main[0].name
  container_access_type = "private"
}

# Service Bus Namespace (if queue is enabled)
resource "azurerm_servicebus_namespace" "main" {
  count               = var.enable_queue ? 1 : 0
  name                = "sb-${var.service_name}-${random_string.suffix.result}"
  location            = azurerm_resource_group.main.location
  resource_group_name = azurerm_resource_group.main.name
  sku                 = var.servicebus_sku

  tags = var.tags
}

# Service Bus Queue
resource "azurerm_servicebus_queue" "main" {
  count        = var.enable_queue ? 1 : 0
  name         = "${var.service_name}-queue"
  namespace_id = azurerm_servicebus_namespace.main[0].id

  enable_partitioning = false
}

# User Assigned Identity for Container App
resource "azurerm_user_assigned_identity" "main" {
  name                = "id-${var.service_name}-${random_string.suffix.result}"
  resource_group_name = azurerm_resource_group.main.name
  location            = azurerm_resource_group.main.location

  tags = var.tags
}

# Role assignments for the managed identity
resource "azurerm_role_assignment" "acr_pull" {
  scope                = azurerm_container_registry.main.id
  role_definition_name = "AcrPull"
  principal_id         = azurerm_user_assigned_identity.main.principal_id
}

resource "azurerm_role_assignment" "storage_blob" {
  count                = var.enable_storage ? 1 : 0
  scope                = azurerm_storage_account.main[0].id
  role_definition_name = "Storage Blob Data Contributor"
  principal_id         = azurerm_user_assigned_identity.main.principal_id
}

# Container App
resource "azurerm_container_app" "main" {
  name                         = "ca-${var.service_name}-${random_string.suffix.result}"
  container_app_environment_id = azurerm_container_app_environment.main.id
  resource_group_name          = azurerm_resource_group.main.name
  revision_mode                = "Single"

  identity {
    type         = "UserAssigned"
    identity_ids = [azurerm_user_assigned_identity.main.id]
  }

  registry {
    server   = azurerm_container_registry.main.login_server
    identity = azurerm_user_assigned_identity.main.id
  }

  template {
    container {
      name   = var.service_name
      image  = "${azurerm_container_registry.main.login_server}/${var.service_name}:latest"
      cpu    = var.cpu
      memory = var.memory

      # Environment variables
      dynamic "env" {
        for_each = var.enable_database ? [1] : []
        content {
          name  = "DATABASE_CONNECTION_STRING"
          value = "Server=${azurerm_mssql_server.main[0].fully_qualified_domain_name};Database=${azurerm_mssql_database.main[0].name};User Id=${var.database_admin_username};Password=${var.database_admin_password};Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
        }
      }

      dynamic "env" {
        for_each = var.enable_cache ? [1] : []
        content {
          name  = "REDIS_CONNECTION_STRING"
          value = "${azurerm_redis_cache.main[0].hostname}:${azurerm_redis_cache.main[0].ssl_port},password=${azurerm_redis_cache.main[0].primary_access_key},ssl=True,abortConnect=False"
        }
      }

      dynamic "env" {
        for_each = var.enable_storage ? [1] : []
        content {
          name  = "STORAGE_CONNECTION_STRING"
          value = azurerm_storage_account.main[0].primary_connection_string
        }
      }

      dynamic "env" {
        for_each = var.enable_storage ? [1] : []
        content {
          name  = "STORAGE_CONTAINER_NAME"
          value = azurerm_storage_container.main[0].name
        }
      }

      dynamic "env" {
        for_each = var.enable_queue ? [1] : []
        content {
          name  = "SERVICEBUS_CONNECTION_STRING"
          value = azurerm_servicebus_namespace.main[0].default_primary_connection_string
        }
      }

      dynamic "env" {
        for_each = var.enable_queue ? [1] : []
        content {
          name  = "SERVICEBUS_QUEUE_NAME"
          value = azurerm_servicebus_queue.main[0].name
        }
      }

      env {
        name  = "ASPNETCORE_ENVIRONMENT"
        value = "Production"
      }
    }

    min_replicas = var.min_replicas
    max_replicas = var.max_replicas
  }

  ingress {
    allow_insecure_connections = false
    external_enabled           = true
    target_port                = var.port

    traffic_weight {
      percentage      = 100
      latest_revision = true
    }
  }

  tags = var.tags

  depends_on = [
    azurerm_role_assignment.acr_pull,
    azurerm_role_assignment.storage_blob
  ]
}