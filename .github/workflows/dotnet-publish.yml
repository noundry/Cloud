name: Publish NDC CLI and Templates

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Restore dependencies
      run: dotnet restore ndc-csharp.sln
    
    - name: Build solution
      run: dotnet build ndc-csharp.sln --no-restore --configuration Release
    
    - name: Run unit tests
      run: dotnet test tests/NDC.Cli.Tests/NDC.Cli.Tests.csproj --no-build --configuration Release --verbosity normal
    
    - name: Test CLI tool functionality
      run: |
        # Install the CLI tool locally
        dotnet pack src/NDC.Cli/NDC.Cli.csproj --no-build --configuration Release --output ./packages
        dotnet tool install --global --add-source ./packages NDC.Cli
        
        # Test CLI help command
        ndc --help
        
        # Test template creation using working examples
        mkdir -p test-output
        cd test-output
        
        # Test basic template copying (current approach)
        cp -r ../examples/working-aws-template TestApp
        
        # Verify template files exist
        [ -f TestApp/MyApp.sln ] || exit 1
        [ -f TestApp/src/MyApp.AppHost/MyApp.AppHost.csproj ] || exit 1
        
        # Test building the generated project
        cd TestApp
        dotnet restore MyApp.sln
        dotnet build MyApp.sln --no-restore --configuration Release

  publish-cli:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Update version in CLI project
      run: |
        sed -i "s/<PackageVersion>.*<\/PackageVersion>/<PackageVersion>${{ steps.version.outputs.VERSION }}<\/PackageVersion>/" src/NDC.Cli/NDC.Cli.csproj
    
    - name: Pack CLI tool
      run: dotnet pack src/NDC.Cli/NDC.Cli.csproj --configuration Release --output ./packages -p:PackageVersion=${{ steps.version.outputs.VERSION }}
    
    - name: Publish CLI to NuGet
      run: dotnet nuget push ./packages/NDC.Cli.${{ steps.version.outputs.VERSION }}.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

  publish-templates:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        template: 
          - NDC.Templates.WebApp
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Update version in template project
      run: |
        sed -i "s/<PackageVersion>.*<\/PackageVersion>/<PackageVersion>${{ steps.version.outputs.VERSION }}<\/PackageVersion>/" src/${{ matrix.template }}/${{ matrix.template }}.csproj
    
    - name: Pack template package
      run: dotnet pack src/${{ matrix.template }}/${{ matrix.template }}.csproj --configuration Release --output ./packages -p:PackageVersion=${{ steps.version.outputs.VERSION }}
    
    - name: Publish templates to NuGet
      run: dotnet nuget push ./packages/${{ matrix.template }}.${{ steps.version.outputs.VERSION }}.nupkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

  create-release:
    needs: [test, publish-cli, publish-templates]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body: |
          ## NDC (Noundry Deploy CLI) v${{ steps.version.outputs.VERSION }}
          
          ### üöÄ C# Implementation with Aspire Integration
          
          #### üì¶ Installation
          ```bash
          # Install CLI tool
          dotnet tool install --global NDC.Cli
          
          # Use working examples
          git clone https://github.com/plsft/noundry-cloud-cli.git
          cd noundry-cloud-cli
          ```
          
          #### üõ†Ô∏è Usage
          ```bash
          # Use working examples
          cp -r examples/working-aws-template MyApp
          cp -r examples/working-gcp-template MyApp
          cp -r examples/working-azure-template MyApp
          cp -r examples/working-container-template MyApp
          
          # Future CLI commands:
          # ndc create webapp-aws --name MyApp
          ```
          
          #### ‚ú® What's New
          - **Native C# CLI**: Built with System.CommandLine
          - **Aspire Integration**: Full service orchestration
          - **Service Discovery**: Local-to-cloud mapping
          - **Rich Templates**: Complex conditional logic
          - **NuGet Distribution**: Standard .NET package management
          
          #### üèóÔ∏è Generated Architecture
          - Aspire AppHost for local orchestration
          - Multi-project solution (Api, Worker, ServiceDefaults)
          - Complete Terraform infrastructure
          - Docker Compose for development
          - Production-ready containers
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}